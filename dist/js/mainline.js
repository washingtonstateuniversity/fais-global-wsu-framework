if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (obj, start) {
        for (var i = (start || 0), j = this.length; i < j; i++) {
            if (this[i] === obj) {
                return i;
            }
        }
        return -1;
    };
}
if (!Array.prototype["remove"]) {
    Array.prototype["remove"] = function () {
        var what, a = arguments, L = a.length, ax;
        while (L && this.length) {
            what = a[--L];
            while ((ax = this.indexOf(what)) !== -1) {
                this.splice(ax, 1);
            }
        }
        return this;
    };
}
if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (chars) {
        return this.substr(-chars.length) === chars;
    };
}
if (!String.prototype.leadingChars) {
    String.prototype.leadingChars = function (chars, length) {
        if (length > 0) {
            return (chars.toString().repeat(length) + this).substr(-length);
        }
        else {
            return (this + chars.toString().repeat(-length)).substr(0, -length);
        }
    };
}
if (!String.prototype.toCamelCase) {
    String.prototype.toCamelCase = function () {
        return this.replace(/(?:^\w|[A-Z]|-|\b\w)/g, function (ltr, idx) { return idx === 0
            ? ltr.toLowerCase()
            : ltr.toUpperCase(); }).replace(/\s+|-/g, '');
    };
}
window.matchMedia = window.matchMedia || (window.matchMedia = function () {
    'use strict';
    var styleMedia = (window.styleMedia || window.media);
    if (!styleMedia) {
        var style_1 = document.createElement('style'), script = document.getElementsByTagName('script')[0], info_1 = null;
        style_1.type = 'text/css';
        style_1.id = 'matchmediajs-test';
        script.parentNode.insertBefore(style_1, script);
        info_1 = ('getComputedStyle' in window) && window.getComputedStyle(style_1, null) || style_1.currentStyle;
        styleMedia = {
            matchMedium: function (media) {
                var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';
                if (style_1.styleSheet) {
                    style_1.styleSheet.cssText = text;
                }
                else {
                    style_1.textContent = text;
                }
                return info_1.width === '1px';
            }
        };
    }
    return function (media) {
        return {
            matches: styleMedia.matchMedium(media || 'all'),
            media: media || 'all'
        };
    };
}());
document.getElementsByTagName("html")[0].setAttribute('data-useragent', navigator.userAgent);
window.WSU = window.WSU || {};
(function (w) {
    w.defined = function (ns, type) {
        if ('undefined' !== typeof type) {
            if ('array' === type) {
                return typeof ns === 'object' &&
                    Object.prototype.toString.call(ns) === '[object Array]';
            }
            if ('string' === type) {
                return Object.prototype.toString.call(ns) === '[object String]';
            }
            return 'undefined' !== typeof ns && typeof ns === type;
        }
        return typeof ns !== 'undefined';
    };
    w.define = function (ns, val, ns_root) {
        var parent = ns;
        if (!w.defined(ns, 'object')) {
            parent = w.prime(ns, ns_root);
        }
        try {
            parent = val;
            return true;
        }
        catch (e) {
            w._d(e);
            return false;
        }
    };
    w.merge = function (obj) {
        var out = {};
        for (var i = 0; i < obj.length; i++) {
            for (var _a = 0, _b = Object.keys(obj[i]); _a < _b.length; _a++) {
                var p = _b[_a];
                out[p] = obj[i][p];
            }
        }
        return out;
    };
    w.prime = function (ns, ns_root, options) {
        ns_root = ns_root || window;
        options = Object.assign({ value: {}, override: true, merge: true }, options);
        var parent = ns_root, pl, i;
        function build_ns(_ns) {
            var out = [];
            if (!w.defined(_ns, 'object')) {
                try {
                    out = _ns.toString().split('.');
                }
                catch (e) {
                    w._i(e, _ns);
                    return false;
                }
            }
            else {
                _ns.forEach(function (obj) {
                    out = out.concat(build_ns(obj));
                });
            }
            return out;
        }
        var parts = build_ns(ns);
        pl = parts.length;
        for (i = 0; i < pl; i++) {
            if (!w.defined(parent[parts[i]]) || ((i === pl - 1))) {
                var value = parent[parts[i]] || {};
                if ((i === pl - 1) && w.defined(options.value) && w.defined(options.override) && true === options.override) {
                    if (w.defined(value) && w.defined(options.merge) && true === options.merge) {
                        if (w.defined(options.value, "string") || w.defined(options.value, "number")) {
                            value = value + options.value;
                        }
                        else if (w.defined(options.value, "boolean")) {
                            value = options.value;
                        }
                        else {
                            value = w.merge([value, options.value]);
                        }
                    }
                    else {
                        value = options.value;
                    }
                }
                parent[parts[i]] = value;
            }
            parent = parent[parts[i]];
        }
        return parent;
    };
    w.included = [];
    w.include = function (ns_path, callback) {
        if (!w.defined(w.included[ns_path])) {
            var srpt = document.createElement('script');
            if (w.defined(callback, 'function')) {
                srpt.addEventListener('load', callback);
            }
            srpt.src = ns_path + '.js';
            w.included.push(ns_path);
            document.querySelector('head').appendChild(srpt);
        }
    };
    w._d = function (output) {
        w.defined(WSU.state.debug) && WSU.state.debug && window.console.debug(output);
    };
    w._i = function (a, b) {
        w.defined(WSU.state.debug) && WSU.state.debug && window.console.info(a, b);
    };
}(WSU));
(function ($, jQuery) {
    jQuery.expr[":"].regex = function (elem, index, match) {
        var matchParams = match[3].split(","), validLabels = /^(data|css):/, attr = {
            method: matchParams[0].match(validLabels) ?
                matchParams[0].split(":")[0] : "attr",
            property: matchParams.shift().replace(validLabels, "")
        }, regexFlags = "ig", regex = new RegExp(matchParams.join("").replace(/^\s+|\s+$/g, ""), regexFlags);
        return regex.test(jQuery(elem)[attr.method](attr.property));
    };
    $.fn.overflown = function () { var e = this[0]; return e.scrollHeight > e.clientHeight || e.scrollWidth > e.clientWidth; };
    (function (factory) {
        if (WSU.defined(window.define, "function") && window.define.amd) {
            window.define(["jquery", "./version"], factory);
        }
        else {
            factory(jQuery);
        }
    }(function ($) {
        return jQuery.fn.extend({
            uniqueId: (function () {
                var uuid = 0;
                return function () {
                    return this.each(function () {
                        if (!this.id) {
                            this.id = "fw-trc-" + (++uuid);
                        }
                    });
                };
            })(),
            removeUniqueId: function () {
                return this.each(function () {
                    if (/^fw-trc-\d+$/.test(this.id)) {
                        $(this).removeAttr("id");
                    }
                });
            }
        });
    }));
    $.render = function (html, options) {
        var re, add, match, cursor, code, reExp, result;
        re = /<%(.+?)%>/g;
        reExp = /(^( )?(var|if|for|else|switch|case|break|{|}|;))(.*)?/g;
        code = "var r=[];\n";
        cursor = 0;
        add = function (line, js) {
            if (js) {
                code += line.match(reExp) ? line + "\n" : "r.push(" + line + ");\n";
            }
            else {
                code += line !== "" ? "r.push('" + line.replace(/'/g, "\"") + "');\n" : "";
            }
            return add;
        };
        while ((match = re.exec(html))) {
            add(html.slice(cursor, match.index))(match[1], true);
            cursor = match.index + match[0].length;
        }
        add(html.substr(cursor, html.length - cursor));
        code = (code + "return r.join('');").replace(/[\r\t\n]/g, "");
        result = new Function(code).apply(options);
        return result;
    };
}(window.jQuery, window.jQuery));
(function (window, UI) {
    UI.test = function () {
        WSU._d('get to the UI');
        WSU._d(UI);
        WSU._d('1214'.leadingChars('0', 10));
    };
    WSU.prime('actions.types', UI);
}(window, WSU.prime('ui', WSU)));
(function (window, UTIL) {
    UTIL.dumpKeysRecursively = function (obj, regex) {
        var keys = [];
        regex = regex || false;
        var createKeyPath = function (currentKeyPath, key) {
            return currentKeyPath + (currentKeyPath ? '.' : '') + key;
        };
        (function (path, any) {
            var i, k, currentPath;
            if (WSU.defined(any, "array")) {
                for (i = 0; i < any.length; i += 1) {
                    currentPath = createKeyPath(path, (i).toString());
                    if (false !== regex) {
                        var pmatch = regex.exec(currentPath);
                        if (null !== pmatch) {
                            keys.push(currentPath);
                        }
                    }
                    else {
                        keys.push(currentPath);
                    }
                    arguments.callee(currentPath, any[i]);
                }
            }
            else if (!WSU.defined(any, "string")) {
                for (k in any) {
                    if (any.hasOwnProperty(k)) {
                        currentPath = createKeyPath(path, k);
                        if (false !== regex) {
                            var rmatch = regex.exec(currentPath);
                            if (null !== rmatch) {
                                keys.push(currentPath);
                            }
                        }
                        else {
                            keys.push(currentPath);
                        }
                        arguments.callee(currentPath, any[k]);
                    }
                }
            }
        })('', obj);
        return keys;
    };
}(window, WSU.prime('utilities', WSU)));
(function (window, UTIL) {
    UTIL.test = function () {
        WSU._d('get to the WSUutilStatic');
        WSU._d(UTIL);
        WSU._d('1214'.leadingChars('0', 10));
    };
    WSU.prime('actions.types', UTIL);
}(window, WSU.prime('utilities', WSU)));
//# sourceMappingURL=data:application/json;base64,