if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (obj, start) {
        for (var i = (start || 0), j = this.length; i < j; i++) {
            if (this[i] === obj) {
                return i;
            }
        }
        return -1;
    };
}
if (!Array.prototype["remove"]) {
    Array.prototype["remove"] = function () {
        var what, a = arguments, L = a.length, ax;
        while (L && this.length) {
            what = a[--L];
            while ((ax = this.indexOf(what)) !== -1) {
                this.splice(ax, 1);
            }
        }
        return this;
    };
}
if (typeof Object.assign != 'function') {
    Object.assign = function (target) {
        'use strict';
        if (target == null) {
            throw new TypeError('Cannot convert undefined or null to object');
        }
        target = Object(target);
        for (var index = 1; index < arguments.length; index++) {
            var source = arguments[index];
            if (source != null) {
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
        }
        return target;
    };
}
if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (chars) {
        return this.substr(-chars.length) === chars;
    };
}
if (!String.prototype.leadingChars) {
    String.prototype.leadingChars = function (chars, length) {
        if (length > 0) {
            return (chars.toString().repeat(length) + this).substr(-length);
        }
        else {
            return (this + chars.toString().repeat(-length)).substr(0, -length);
        }
    };
}
if (!String.prototype.toCamelCase) {
    String.prototype.toCamelCase = function () {
        return this.replace(/(?:^\w|[A-Z]|-|\b\w)/g, function (ltr, idx) { return idx === 0
            ? ltr.toLowerCase()
            : ltr.toUpperCase(); }).replace(/\s+|-/g, '');
    };
}
window.matchMedia = window.matchMedia || (window.matchMedia = function () {
    'use strict';
    var styleMedia = (window.styleMedia || window.media);
    if (!styleMedia) {
        var style_1 = document.createElement('style'), script = document.getElementsByTagName('script')[0], info_1 = null;
        style_1.type = 'text/css';
        style_1.id = 'matchmediajs-test';
        script.parentNode.insertBefore(style_1, script);
        info_1 = ('getComputedStyle' in window) && window.getComputedStyle(style_1, null) || style_1.currentStyle;
        styleMedia = {
            matchMedium: function (media) {
                var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';
                if (style_1.styleSheet) {
                    style_1.styleSheet.cssText = text;
                }
                else {
                    style_1.textContent = text;
                }
                return info_1.width === '1px';
            }
        };
    }
    return function (media) {
        return {
            matches: styleMedia.matchMedium(media || 'all'),
            media: media || 'all'
        };
    };
}());
document.getElementsByTagName("html")[0].setAttribute('data-useragent', navigator.userAgent);
window.WSU = window.WSU || {};
(function (w) {
    w.defined = function (ns, type) {
        if ('undefined' === typeof ns) {
            return false;
        }
        if ('undefined' !== typeof type) {
            if ('array' === type) {
                return typeof ns === 'object' &&
                    Object.prototype.toString.call(ns) === '[object Array]';
            }
            if ('string' === type) {
                return Object.prototype.toString.call(ns) === '[object String]';
            }
            if ('number' === type) {
                return !w.defined(ns, 'array') && (ns - parseFloat(ns) + 1) >= 0;
            }
            if ('undefined' !== typeof ns && typeof ns !== type && typeof type === 'object') {
                return ns instanceof type;
            }
            return 'undefined' !== typeof ns && typeof ns === type;
        }
        return true;
    };
    w.define = function (ns, val, ns_root) {
        var parent = ns;
        if (!w.defined(ns, 'object')) {
            parent = w.prime(ns, ns_root);
        }
        try {
            parent = val;
            return true;
        }
        catch (e) {
            w._d(e);
            return false;
        }
    };
    w.merge = function (obj) {
        var out = {};
        for (var i = 0; i < obj.length; i++) {
            for (var _a = 0, _b = Object.keys(obj[i]); _a < _b.length; _a++) {
                var p = _b[_a];
                out[p] = obj[i][p];
            }
        }
        return out;
    };
    w.extend = function () {
        var p = [];
        for (var _a = 0; _a < arguments.length; _a++) {
            p[_a] = arguments[_a];
        }
        var options, name, src, copy, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === 'boolean') {
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        if (!w.defined(target, 'object') && !w.defined(target, 'function')) {
            target = {};
        }
        if (i === length) {
            target = this;
            i--;
        }
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    if (!options.hasOwnProperty(name)) {
                        continue;
                    }
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (deep && copy && w.defined(copy, 'object')) {
                        if (w.defined(copy, 'array')) {
                            clone = src && w.defined(src, 'array') ? src : [];
                        }
                        else {
                            clone = src && w.defined(src, 'object') ? src : {};
                        }
                        target[name] = w.extend(deep, clone, copy);
                    }
                    else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };
    w.parse_ns = function (_ns) {
        var out = [];
        if (!w.defined(_ns, 'object')) {
            try {
                out = _ns.toString().split('.');
            }
            catch (e) {
                w._i(e, _ns);
                return false;
            }
        }
        else {
            _ns.forEach(function (obj) {
                out = out.concat(w.parse_ns(obj));
            });
        }
        return out;
    };
    w.prime = function (ns, ns_root, options) {
        ns_root = ns_root || window;
        options = Object.assign({ value: {}, override: false, merge: true, deep: true }, options);
        var parent = ns_root, pl, i;
        var parts = w.parse_ns(ns);
        pl = parts.length;
        for (i = 0; i < pl; i++) {
            if (!w.defined(parent[parts[i]]) || ((i === pl - 1))) {
                var value = parent[parts[i]] || {};
                if ((i === pl - 1) && w.defined(options.value)) {
                    if (w.defined(value) && w.defined(options.merge) && true === options.merge) {
                        if (w.defined(options.value, 'string') || w.defined(options.value, 'number')) {
                            value = value + options.value;
                        }
                        else if (w.defined(options.value, 'boolean')) {
                            value = options.value;
                        }
                        else {
                            value = w.extend(options.deep, value, options.value);
                        }
                    }
                    else if (w.defined(options.override) && true === options.override) {
                        value = options.value;
                    }
                }
                parent[parts[i]] = value;
            }
            parent = parent[parts[i]];
        }
        return parent;
    };
    w.get_ns = function (ns) {
        var parent = window, pl, i, out = null;
        var parts = w.parse_ns(ns);
        pl = parts.length;
        for (i = 0; i < pl; i++) {
            if (w.defined(parent[parts[i]]) || ((i === pl - 1))) {
                var value = parent[parts[i]] || {};
                out = value;
            }
            parent = parent[parts[i]];
        }
        return out;
    };
    w.included = [];
    w.include = function (ns_path, callback) {
        if (!w.defined(w.included[ns_path])) {
            var srpt = document.createElement('script');
            if (w.defined(callback, 'function')) {
                srpt.addEventListener('load', callback);
            }
            srpt.src = ns_path + '.js';
            w.included.push(ns_path);
            document.querySelector('head').appendChild(srpt);
        }
    };
    w._d = function (output) {
        w.defined(WSU.state.debug) && WSU.state.debug && window.console.debug(output);
    };
    w._i = function (a, b) {
        w.defined(WSU.state.debug) && WSU.state.debug && window.console.info(a, b);
    };
}(WSU));
(function ($, jQuery) {
    jQuery.expr[":"].regex = function (elem, index, match) {
        var matchParams = match[3].split(","), validLabels = /^(data|css):/, attr = {
            method: matchParams[0].match(validLabels) ?
                matchParams[0].split(":")[0] : "attr",
            property: matchParams.shift().replace(validLabels, "")
        }, regexFlags = "ig", regex = new RegExp(matchParams.join("").replace(/^\s+|\s+$/g, ""), regexFlags);
        return regex.test(jQuery(elem)[attr.method](attr.property));
    };
    $.fn.overflown = function () { var e = this[0]; return e.scrollHeight > e.clientHeight || e.scrollWidth > e.clientWidth; };
    (function (factory) {
        if (WSU.defined(window.define, "function") && window.define.amd) {
            window.define(["jquery", "./version"], factory);
        }
        else {
            factory(jQuery);
        }
    }(function ($) {
        return jQuery.fn.extend({
            uniqueId: (function () {
                var uuid = 0;
                return function () {
                    return this.each(function () {
                        if (!this.id) {
                            this.id = "fw-trc-" + (++uuid);
                        }
                    });
                };
            })(),
            removeUniqueId: function () {
                return this.each(function () {
                    if (/^fw-trc-\d+$/.test(this.id)) {
                        $(this).removeAttr("id");
                    }
                });
            }
        });
    }));
    $.render = function (html, options) {
        var re, add, match, cursor, code, reExp, result;
        re = /<%(.+?)%>/g;
        reExp = /(^( )?(var|if|for|else|switch|case|break|{|}|;))(.*)?/g;
        code = "var r=[];\n";
        cursor = 0;
        add = function (line, js) {
            if (js) {
                code += line.match(reExp) ? line + "\n" : "r.push(" + line + ");\n";
            }
            else {
                code += line !== "" ? "r.push('" + line.replace(/'/g, "\"") + "');\n" : "";
            }
            return add;
        };
        while ((match = re.exec(html))) {
            add(html.slice(cursor, match.index))(match[1], true);
            cursor = match.index + match[0].length;
        }
        if (WSU.defined(html, 'string')) {
            add(html.substr(cursor, html.length - cursor));
            code = (code + "return r.join('');").replace(/[\r\t\n]/g, "");
            result = new Function(code).apply(options);
        }
        return result;
    };
}(window.jQuery, window.jQuery));
(function (window, UI) {
    UI.test = function () {
        WSU._d('get to the UI');
        WSU._d(UI);
        WSU._d('1214'.leadingChars('0', 10));
    };
    WSU.prime('actions.types', UI);
}(window, WSU.prime('ui', WSU)));
(function (window, UTIL) {
    UTIL.dumpKeysRecursively = function (obj, regex) {
        var keys = [];
        regex = regex || false;
        var createKeyPath = function (currentKeyPath, key) {
            return currentKeyPath + (currentKeyPath ? '.' : '') + key;
        };
        (function (path, any) {
            var i, k, currentPath;
            if (WSU.defined(any, "array")) {
                for (i = 0; i < any.length; i += 1) {
                    currentPath = createKeyPath(path, (i).toString());
                    if (false !== regex) {
                        var pmatch = regex.exec(currentPath);
                        if (null !== pmatch) {
                            keys.push(currentPath);
                        }
                    }
                    else {
                        keys.push(currentPath);
                    }
                    arguments.callee(currentPath, any[i]);
                }
            }
            else if (!WSU.defined(any, "string")) {
                for (k in any) {
                    if (any.hasOwnProperty(k)) {
                        currentPath = createKeyPath(path, k);
                        if (false !== regex) {
                            var rmatch = regex.exec(currentPath);
                            if (null !== rmatch) {
                                keys.push(currentPath);
                            }
                        }
                        else {
                            keys.push(currentPath);
                        }
                        arguments.callee(currentPath, any[k]);
                    }
                }
            }
        })('', obj);
        return keys;
    };
}(window, WSU.prime('utilities', WSU)));
(function (window, UTIL) {
    UTIL.test = function () {
        WSU._d('get to the WSUutilStatic');
        WSU._d(UTIL);
        WSU._d('1214'.leadingChars('0', 10));
    };
    WSU.prime('actions.types', UTIL);
}(window, WSU.prime('utilities', WSU)));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbmxpbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9wb2x5ZmlsbHMvYXJyYXkucHJvdG90eXBlLmluZGV4b2YudHMiLCIuLi8uLi9zcmMvc2NyaXB0cy9wb2x5ZmlsbHMvYXJyYXkucHJvdG90eXBlLnJlbW92ZS50cyIsIi4uLy4uL3NyYy9zY3JpcHRzL3BvbHlmaWxscy9vYmplY3QuYXNzaWduLnRzIiwiLi4vLi4vc3JjL3NjcmlwdHMvcG9seWZpbGxzL3N0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgudHMiLCIuLi8uLi9zcmMvc2NyaXB0cy9wb2x5ZmlsbHMvc3RyaW5nLnByb3RvdHlwZS5sZWFkaW5nQ2hhci50cyIsIi4uLy4uL3NyYy9zY3JpcHRzL3BvbHlmaWxscy9zdHJpbmcucHJvdG90eXBlLnRvQ2FtZWxDYXNlLnRzIiwiLi4vLi4vc3JjL3NjcmlwdHMvcG9seWZpbGxzL3dpbmRvdy5tYXRjaE1lZGlhLnRzIiwiLi4vLi4vc3JjL3NjcmlwdHMvY29yZS9tYWlubGluZS50cyIsIi4uLy4uL3NyYy9zY3JpcHRzL3VpL21haW5saW5lLnRzIiwiLi4vLi4vc3JjL3NjcmlwdHMvdXRpbGl0aWVzL2R1bXBLZXlzUmVjdXJzaXZlbHkvZHVtcEtleXNSZWN1cnNpdmVseS50cyIsIi4uLy4uL3NyYy9zY3JpcHRzL3V0aWxpdGllcy9tYWlubGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMzQixLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxVQUFTLEdBQUcsRUFBRSxLQUFLO1FBQ3pDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVB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cnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgIEFycmF5LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24ob2JqLCBzdGFydCkge1xuICAgICAgICBmb3IgKGxldCBpID0gKHN0YXJ0IHx8IDApLCBqID0gdGhpcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSBvYmopIHsgcmV0dXJuIGk7IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbn1cbiIsImlmICghQXJyYXkucHJvdG90eXBlW1wicmVtb3ZlXCJdKSB7XG4gICAgQXJyYXkucHJvdG90eXBlW1wicmVtb3ZlXCJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd2hhdDogYW55LCBhID0gYXJndW1lbnRzLCBMID0gYS5sZW5ndGgsIGF4OiBhbnk7XG4gICAgICAgIHdoaWxlIChMICYmIHRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB3aGF0ID0gYVstLUxdO1xuICAgICAgICAgICAgd2hpbGUgKChheCA9IHRoaXMuaW5kZXhPZih3aGF0KSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zcGxpY2UoYXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbiIsImlmICh0eXBlb2YgT2JqZWN0LmFzc2lnbiAhPSAnZnVuY3Rpb24nKSB7XG4gIE9iamVjdC5hc3NpZ24gPSBmdW5jdGlvbih0YXJnZXQ6YW55KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGlmICh0YXJnZXQgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gT2JqZWN0KHRhcmdldCk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgaWYgKHNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbn1cbiIsImlmICghU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aCkge1xuICAgIFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGggPSBmdW5jdGlvbiAoY2hhcnM6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJzdHIoLWNoYXJzLmxlbmd0aCkgPT09IGNoYXJzO1xuICAgIH07XG59XG4iLCJpZiAoIVN0cmluZy5wcm90b3R5cGUubGVhZGluZ0NoYXJzKSB7XG4gICAgU3RyaW5nLnByb3RvdHlwZS5sZWFkaW5nQ2hhcnMgPSBmdW5jdGlvbiAoY2hhcnM6IHN0cmluZ3xudW1iZXIsIGxlbmd0aDogbnVtYmVyKTogc3RyaW5nICB7XG4gICAgICAgIGlmKGxlbmd0aD4wKXtcbiAgICAgICAgICAgIHJldHVybiAoY2hhcnMudG9TdHJpbmcoKS5yZXBlYXQobGVuZ3RoKSArIHRoaXMpLnN1YnN0cigtbGVuZ3RoKTsgLy9udW1iZXIgaXMgcG9zaXRpdmUsIHNvIGN1dCBmcm9tIHJpZ2h0IGFrYSBsZWFkaW5nXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzICsgY2hhcnMudG9TdHJpbmcoKS5yZXBlYXQoLWxlbmd0aCkpLnN1YnN0cigwLC1sZW5ndGgpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbiIsImlmICghU3RyaW5nLnByb3RvdHlwZS50b0NhbWVsQ2FzZSkge1xuICAgIFN0cmluZy5wcm90b3R5cGUudG9DYW1lbENhc2UgPSBmdW5jdGlvbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC8oPzpeXFx3fFtBLVpdfC18XFxiXFx3KS9nLFxuICAgICAgICAobHRyOmFueSwgaWR4OmFueSkgPT4gaWR4ID09PSAwXG4gICAgICAgICAgICAgICAgPyBsdHIudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgIDogbHRyLnRvVXBwZXJDYXNlKClcbiAgICAgICAgKS5yZXBsYWNlKC9cXHMrfC0vZywgJycpO1xuICAgIH07XG59XG4iLCIvKiEgbWF0Y2hNZWRpYSgpIHBvbHlmaWxsIC0gVGVzdCBhIENTUyBtZWRpYSB0eXBlL3F1ZXJ5IGluIEpTLlxuICAgIEF1dGhvcnMgJiBjb3B5cmlnaHQgKGMpIDIwMTI6IFNjb3R0IEplaGwsIFBhdWwgSXJpc2gsIE5pY2hvbGFzIFpha2FzLCBEYXZpZCBLbmlnaHQuIER1YWwgTUlUL0JTRCBsaWNlbnNlXG4gICAgfHwgYWx0ZXJlZCB0byB3b3JrIGZvciB0eXBlc2NyaXRwdCBieSBKZXJlbXkgQmFzcyBpbiAyMDE2ICovXG4oPGFueT53aW5kb3cpLm1hdGNoTWVkaWEgPSB3aW5kb3cubWF0Y2hNZWRpYSB8fCAoKDxhbnk+d2luZG93KS5tYXRjaE1lZGlhID0gZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gRm9yIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBtYXRjaE1lZGl1bSBhcGkgc3VjaCBhcyBJRSA5IGFuZCB3ZWJraXRcbiAgICBsZXQgc3R5bGVNZWRpYSA9ICh3aW5kb3cuc3R5bGVNZWRpYSB8fCAoPGFueT53aW5kb3cpLm1lZGlhKTtcblxuICAgIC8vIEZvciB0aG9zZSB0aGF0IGRvbid0IHN1cHBvcnQgbWF0Y2hNZWRpdW1cbiAgICBpZiAoIXN0eWxlTWVkaWEpIHtcbiAgICAgICAgbGV0IHN0eWxlOiBhbnkgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKSxcbiAgICAgICAgICAgIHNjcmlwdDogYW55ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdLFxuICAgICAgICAgICAgaW5mbzogYW55ICAgPSBudWxsO1xuXG4gICAgICAgIHN0eWxlLnR5cGUgID0gJ3RleHQvY3NzJztcbiAgICAgICAgc3R5bGUuaWQgICAgPSAnbWF0Y2htZWRpYWpzLXRlc3QnO1xuXG4gICAgICAgIHNjcmlwdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgc2NyaXB0KTtcblxuICAgICAgICAvLyAnc3R5bGUuY3VycmVudFN0eWxlJyBpcyB1c2VkIGJ5IElFIDw9IDggYW5kICd3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZScgZm9yIGFsbCBvdGhlciBicm93c2Vyc1xuICAgICAgICBpbmZvID0gKCdnZXRDb21wdXRlZFN0eWxlJyBpbiB3aW5kb3cpICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHN0eWxlLCBudWxsKSB8fCBzdHlsZS5jdXJyZW50U3R5bGU7XG5cbiAgICAgICAgc3R5bGVNZWRpYSA9IHtcbiAgICAgICAgICAgIG1hdGNoTWVkaXVtOiBmdW5jdGlvbihtZWRpYTogYW55KSB7XG4gICAgICAgICAgICAgICAgbGV0IHRleHQgPSAnQG1lZGlhICcgKyBtZWRpYSArICd7ICNtYXRjaG1lZGlhanMtdGVzdCB7IHdpZHRoOiAxcHg7IH0gfSc7XG5cbiAgICAgICAgICAgICAgICAvLyAnc3R5bGUuc3R5bGVTaGVldCcgaXMgdXNlZCBieSBJRSA8PSA4IGFuZCAnc3R5bGUudGV4dENvbnRlbnQnIGZvciBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSB0ZXh0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUZXN0IGlmIG1lZGlhIHF1ZXJ5IGlzIHRydWUgb3IgZmFsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5mby53aWR0aCA9PT0gJzFweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG1lZGlhOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1hdGNoZXM6IHN0eWxlTWVkaWEubWF0Y2hNZWRpdW0obWVkaWEgfHwgJ2FsbCcpLFxuICAgICAgICAgICAgbWVkaWE6IG1lZGlhIHx8ICdhbGwnXG4gICAgICAgIH07XG4gICAgfTtcbn0oKSk7XG4iLCJkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImh0bWxcIilbMF0uc2V0QXR0cmlidXRlKCdkYXRhLXVzZXJhZ2VudCcsIG5hdmlnYXRvci51c2VyQWdlbnQpO1xuLy8gdG8gaGVsbCB3aXRoIHRoaW5ncywgbGV0IHRoZSBkZXYgZGVjaWRlIGlmIHRoZXkgd2FudCB0byBzZXQgYnJvd3NlciBzcGVjaWZpYyB3aGF0IGhhdmUgeW91LlxuLy8gYWltIGlzIHRvIGFzc3VtZSBhbnlvbmUgbWFza2luZyB0aGVpciBhZ2VudCBrbm93IHdoYXQgdGhleSBhcmVcbi8vIGdldHRpbmcgaW4gZm9yIGFuZCBpcyBzdGlsbCBhY2NvdW50YWJsZSBmb3IgdG9vLlxuXG5cbi8vIENvcGllZCB3aXRoIHBlcm1pc3Npb24gZnJvbSBmbGV4ZWRcbig8YW55PndpbmRvdykuV1NVID0gKDxhbnk+d2luZG93KS5XU1UgfHwge307XG5cbihmdW5jdGlvbiAodzogV1NVc3RhdGljKSB7XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCB1bmRlZmluZWQgZmlyc3QgdG8gc3BlZWQgY2hlY2tcbiAgICAgKiB0aGVuIHNldCB0byBjaGVjayBpZiB0eXBlIGRlZmluZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCByZXBlcnNlbnRzLlxuICAgICAqIGEgbXVsdGkgdG9vbCB0byBzdHJvbmcgdHlwZSB0aGluZ3MgYnkgY2hlY2tpbmcgdHlwZSBtb3N0IGNvbW1vblxuICAgICAqIHVzZSBpcyBgdy5kZWZpbmVkKG9iailgIGJ1dCBgdy5kZWZpbmVkKG9iaixqUXVlcnkpYCBpcyBzdXBlciBoYW5keSB0b29cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gbnNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3R5cGVdIG5hbWVkIHR5cGUgdG8gcmVzb2x2ZSB0b1xuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgdy5kZWZpbmVkID0gZnVuY3Rpb24obnM6IGFueSwgdHlwZT86IHN0cmluZykge1xuICAgICAgICBpZiAoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiBucykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICggJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiB0eXBlICkge1xuICAgICAgICAgICAgaWYgKCdhcnJheScgPT09IHR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIG5zID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobnMpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChucykgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdudW1iZXInID09PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICF3LmRlZmluZWQobnMsICdhcnJheScpICYmIChucyAtIHBhcnNlRmxvYXQoIG5zICkgKyAxKSA+PSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG5zICYmIHR5cGVvZiBucyAhPT0gdHlwZSAmJiB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnMgaW5zdGFuY2VvZiB0eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICd1bmRlZmluZWQnICE9PSB0eXBlb2YgbnMgJiYgdHlwZW9mIG5zID09PSB0eXBlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdGlsbCB1cCBmb3IgY29uc2lkZXJhdGlvbi4gIG5vdCBpbiBjdXJyZW50IGZvcm0gYnV0IGFzIHNob3J0Y3V0P1xuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBuc1xuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbF1cbiAgICAgKiBAcGFyYW0geyp9IFtuc19yb290XVxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgdy5kZWZpbmUgPSBmdW5jdGlvbihuczogYW55LCB2YWw/OiBhbnksIG5zX3Jvb3Q/OiBhbnkpIHtcbiAgICAgICAgbGV0IHBhcmVudCA9IG5zO1xuICAgICAgICBpZiAoIXcuZGVmaW5lZChucywgJ29iamVjdCcpKSB7XG4gICAgICAgICAgICBwYXJlbnQgPSB3LnByaW1lKG5zLCBuc19yb290KTtcbiAgICAgICAgfVxuICAgICAgICB0cnkgeyAvLyB0ZXN0aW5nIGNhc3VlIGlmIGl0IGRvZXMgZmFpbCB3ZWxsIGl0IGRpZCBhbmQgdGhhdCBjb3VsZCBiZSB1c2VmdWxcbiAgICAgICAgICAgIHBhcmVudCA9IHZhbDsgLy8gd29ycmllZCB0aGlzIHdpbGwgbm90IHVwZGF0ZSBwYXJlbnQgbnMgMTAwXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdy5fZChlKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdXAgY29udGFpbmluZyBvYmplY3QgYW5kIG1lcmdlIGFsbCBpdGVtcyBmcm9tIG1lcmdlIGxpc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IG9ialxuICAgICAqIEByZXR1cm5zIGNhbnRhaW5pbmcgb2JqZWN0O1xuICAgICAqL1xuICAgIHcubWVyZ2UgPSBmdW5jdGlvbihvYmo6IGFueSkge1xuICAgICAgICBsZXQgb3V0OiBhbnkgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHAgb2YgT2JqZWN0LmtleXMob2JqW2ldKSApIHsgLy8gbGV0IHAgaW4gb2JqW2ldKSB7XG4gICAgICAgICAgICAgICAgb3V0W3BdID0gb2JqW2ldW3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIGFsbW9zdCB0aGUgc2FtZSBhcyB3LnByaW1lIGJ1dCBqdXN0IG1hc2hlcyB0aGUgY29saXNpb24gb2YgbnMgd2hlcmVcbiAgICAgKiB3LnByaW1lIGlzIGlzIHRoZSBkZXNpZGVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gey4uLmFueVtdfSBwXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICB3LmV4dGVuZCA9IGZ1bmN0aW9uKC4uLnA6IGFueVtdKSB7XG4gICAgICAgIGxldCBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNsb25lLFxuICAgICAgICAgICAgdGFyZ2V0ID0gYXJndW1lbnRzWzBdIHx8IHt9LFxuICAgICAgICAgICAgaSA9IDEsXG4gICAgICAgICAgICBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgZGVlcCA9IGZhbHNlO1xuXG4gICAgICAgIC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cbiAgICAgICAgaWYgKCB0eXBlb2YgdGFyZ2V0ID09PSAnYm9vbGVhbicgKSB7XG4gICAgICAgICAgICBkZWVwID0gdGFyZ2V0O1xuICAgICAgICAgICAgLy8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuICAgICAgICAgICAgdGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcbiAgICAgICAgaWYgKCAhdy5kZWZpbmVkKHRhcmdldCwgJ29iamVjdCcpICYmICF3LmRlZmluZWQodGFyZ2V0LCAnZnVuY3Rpb24nKSApIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRXh0ZW5kIGZsZXhlZCBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG4gICAgICAgIGlmICggaSA9PT0gbGVuZ3RoICkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcztcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgLy8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuICAgICAgICAgICAgaWYgKCAob3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdKSAhPSBudWxsICkge1xuICAgICAgICAgICAgICAgIC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3RcbiAgICAgICAgICAgICAgICBmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggIW9wdGlvbnMuaGFzT3duUHJvcGVydHkobmFtZSkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzcmMgPSB0YXJnZXRbIG5hbWUgXTtcbiAgICAgICAgICAgICAgICAgICAgY29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG4gICAgICAgICAgICAgICAgICAgIGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBkZWVwICYmIGNvcHkgJiYgdy5kZWZpbmVkKGNvcHksICdvYmplY3QnKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdy5kZWZpbmVkKGNvcHksICdhcnJheScpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lID0gc3JjICYmIHcuZGVmaW5lZChzcmMsICdhcnJheScpID8gc3JjIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lID0gc3JjICYmIHcuZGVmaW5lZChzcmMsICdvYmplY3QnKSA/IHNyYyA6IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbIG5hbWUgXSA9IHcuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFsgbmFtZSBdID0gY29weTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAqIEJyZWFrIHVwIGlucHV0IGludG8gYW4gYXJyYXkgaW4gb3JkZXIgb2YgZGVmaW5lZCBuYW1lc3BhY2VcbiAgICAgKiByZWN1cnNlIHdoZW4gbm90IGEgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBfbnNcbiAgICAgKiBAcmV0dXJucyB7Kn0gaWYgYSBzdHJpbmcgaW5wdXQgc3BsaXQgdG8gYXJyYXkgb24gZG90XG4gICAgICogQGZpbmFsIHthcnJheVtzdHJpbmddfVxuICAgICAqL1xuICAgIHcucGFyc2VfbnMgPSBmdW5jdGlvbiAoX25zOiBhbnkpOiBhbnkgeyAvLyBzaG91bGQgYmUgYWJsZSB0byByZWZhY3RvciB0aGlzIGJpdFxuICAgICAgICBsZXQgb3V0OiBhbnkgPSBbXTtcbiAgICAgICAgaWYgKCAhdy5kZWZpbmVkKF9ucywgJ29iamVjdCcpICkgeyAvLyBlZyBzdHJpbmcgb3IgbnVtYmVyIC8vd2FzICdvYmplY3QnICE9PSB0eXBlb2YgX25zXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG91dCA9IF9ucy50b1N0cmluZygpLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7IC8vIHNvIGF0IHRoaXMgcG9pbnQgaXQgd2FzIG5vdCBhbiBvYmplY3QsIG51bWJlciBvciBzdHJpbmcuLi4gd2hhdCBpcyBpdD9cbiAgICAgICAgICAgICAgICB3Ll9pKGUsIF9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX25zLmZvckVhY2goZnVuY3Rpb24gKG9iajogYW55KSB7XG4gICAgICAgICAgICAgICAgb3V0ID0gb3V0LmNvbmNhdCh3LnBhcnNlX25zKG9iaikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFrZSBuYW1lc3BhY2Ugb2JqZWN0LCBwYXJzZSBpdCwgY2hlY2sgZm9yIHJvb3Qgb2JqZWN0IHBhc3NlZCBhc1xuICAgICAqIHNlY29uZCBhcmd1bWVudCwgdGhlbiBzdGFydCB0aGVyZS4gIEFwcGx5IG9wdGlvbnMgb2Ygc2V0dGluZyBhIHZhbHVlXG4gICAgICogaWYgc2V0IGFzIG92ZXJyaWRlIG9yIG1lcmdlIGlmIG5zIGNvbGlzaW9uIG9jY3Vyc1xuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBuc1xuICAgICAqIEBwYXJhbSB7Kn0gW25zX3Jvb3RdXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc11cbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIHcucHJpbWUgPSBmdW5jdGlvbiAobnM6IGFueSwgbnNfcm9vdD86IGFueSwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICBuc19yb290ID0gbnNfcm9vdCB8fCB3aW5kb3c7IC8vIHNldCB1cCB0aGUgcm9vdCBvYmplY3RcbiAgICAgICAgLy8gaHVsayBzbWFzaD9cbiAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe3ZhbHVlOiB7fSwgb3ZlcnJpZGU6IGZhbHNlLCBtZXJnZTogdHJ1ZSwgZGVlcDogdHJ1ZX0sIG9wdGlvbnMpOyAvLyBzcGVlZCBpdCBpbiB3ZSB0cnVzdCBpdFxuXG4gICAgICAgIGxldCBwYXJlbnQgPSBuc19yb290LCAvLyBhbGFpcyB0byB3b3JrIHdpdGhcbiAgICAgICAgICAgIHBsOiBudW1iZXIsXG4gICAgICAgICAgICBpOiBudW1iZXI7XG5cbiAgICAgICAgbGV0IHBhcnRzOiBhbnkgPSB3LnBhcnNlX25zKG5zKTtcbiAgICAgICAgcGwgPSBwYXJ0cy5sZW5ndGg7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwbDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBjcmVhdGUgYSBwcm9wZXJ0eSBpZiBpdCBkb2VzbnQgZXhpc3RcbiAgICAgICAgICAgIGlmICggIXcuZGVmaW5lZCggcGFyZW50W3BhcnRzW2ldXSApIHx8ICgoaSA9PT0gcGwgLSAxKSkgKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gcGFyZW50W3BhcnRzW2ldXSB8fCB7fTtcbiAgICAgICAgICAgICAgICBpZiAoIChpID09PSBwbCAtIDEpICYmIHcuZGVmaW5lZChvcHRpb25zLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHcuZGVmaW5lZCh2YWx1ZSkgJiYgdy5kZWZpbmVkKCBvcHRpb25zLm1lcmdlICkgJiYgdHJ1ZSA9PT0gb3B0aW9ucy5tZXJnZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdy5kZWZpbmVkKG9wdGlvbnMudmFsdWUsICdzdHJpbmcnKSB8fCB3LmRlZmluZWQob3B0aW9ucy52YWx1ZSwgJ251bWJlcicpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlYWxseT8gIGxvbCB3aHkgd291bGQgeW91PyAgYnV0IHJlZ2FyZGxlc3MgZG9uJ3QgYnVpbGQgd2FsbHMgc28gbGVhdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgb3B0aW9ucy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAody5kZWZpbmVkKG9wdGlvbnMudmFsdWUsICdib29sZWFuJykgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHcuZXh0ZW5kKG9wdGlvbnMuZGVlcCwgdmFsdWUsIG9wdGlvbnMudmFsdWUpOyAvLyBPYmplY3QuYXNzaWduKHZhbHVlLCBvcHRpb25zLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKCB3LmRlZmluZWQoIG9wdGlvbnMub3ZlcnJpZGUgKSAmJiB0cnVlID09PSBvcHRpb25zLm92ZXJyaWRlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcmVudFtwYXJ0c1tpXV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudFtwYXJ0c1tpXV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9O1xuLyoqXG4gICAgICogVGFrZSBuYW1lc3BhY2Ugb2JqZWN0LCBwYXJzZSBpdCwgY2hlY2sgZm9yIHJvb3Qgb2JqZWN0IHBhc3NlZCBhc1xuICAgICAqIHNlY29uZCBhcmd1bWVudCwgdGhlbiBzdGFydCB0aGVyZS4gIEFwcGx5IG9wdGlvbnMgb2Ygc2V0dGluZyBhIHZhbHVlXG4gICAgICogaWYgc2V0IGFzIG92ZXJyaWRlIG9yIG1lcmdlIGlmIG5zIGNvbGlzaW9uIG9jY3Vyc1xuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBuc1xuICAgICAqIEBwYXJhbSB7Kn0gW25zX3Jvb3RdXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc11cbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIHcuZ2V0X25zID0gZnVuY3Rpb24gKG5zOiBhbnkpIHtcbiAgICAgICAgbGV0IHBhcmVudCA9IHdpbmRvdywgLy8gYWxhaXMgdG8gd29yayB3aXRoXG4gICAgICAgICAgICBwbDogbnVtYmVyLFxuICAgICAgICAgICAgaTogbnVtYmVyLFxuICAgICAgICAgICAgb3V0OiBhbnkgPSBudWxsO1xuXG4gICAgICAgIGxldCBwYXJ0czogYW55ID0gdy5wYXJzZV9ucyhucyk7XG4gICAgICAgIHBsID0gcGFydHMubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGw7IGkrKykge1xuICAgICAgICAgICAgLy8gY3JlYXRlIGEgcHJvcGVydHkgaWYgaXQgZG9lc250IGV4aXN0XG4gICAgICAgICAgICBpZiAoIHcuZGVmaW5lZCggcGFyZW50W3BhcnRzW2ldXSApIHx8ICgoaSA9PT0gcGwgLSAxKSkgKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gcGFyZW50W3BhcnRzW2ldXSB8fCB7fTtcbiAgICAgICAgICAgICAgICBvdXQgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudFtwYXJ0c1tpXV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3RpbGwgdXAgZm9yIGNvbnNpZGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbnNfcGF0aCBsb2FkIG5zIGJ5IGZpbGVcbiAgICAgKiBAcGFyYW0geyp9IFtjYWxsYmFja10gZG8gc29tZXRoaW5nIGFmdGVyXG4gICAgICovXG4gICAgdy5pbmNsdWRlZCA9IFtdOyAvLyB0cmFja2VyXG4gICAgdy5pbmNsdWRlID0gZnVuY3Rpb24gKG5zX3BhdGg6IHN0cmluZywgY2FsbGJhY2s/OiBhbnkpe1xuICAgICAgICBpZiAoIXcuZGVmaW5lZCh3LmluY2x1ZGVkW25zX3BhdGhdKSkgeyAvLyBpZiBpdCBpcyBsb2FkZWQgZG9uJ3Qgd29ycnlcbiAgICAgICAgICAgIGxldCBzcnB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICBpZiAoIHcuZGVmaW5lZChjYWxsYmFjaywgJ2Z1bmN0aW9uJykgKSB7XG4gICAgICAgICAgICAgICAgc3JwdC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgY2FsbGJhY2spOyAvLyBwYXNzIG15IGhvaXN0ZWQgZnVuY3Rpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNycHQuc3JjID0gbnNfcGF0aCArICcuanMnO1xuICAgICAgICAgICAgdy5pbmNsdWRlZC5wdXNoKG5zX3BhdGgpO1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpLmFwcGVuZENoaWxkKHNycHQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldCBkZWJ1ZyB0byBjb25zb2xlLiAgdGhpbmsgZmllbGQgZGV0ZWN0b3Igd2hlbiBsZWF2aW5nIGluIHByb2R1Y3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IG91dHB1dFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBzdGF0ZSBvZiBjb21wbGV0aW9uXG4gICAgICovXG4gICAgdy5fZCA9IGZ1bmN0aW9uKG91dHB1dDogYW55KSB7XG4gICAgICAgIC8vIHJldHVybiBmb3IgY29uc2lzdGVuY3lcbiAgICAgICAgIHcuZGVmaW5lZChXU1Uuc3RhdGUuZGVidWcpICYmIFdTVS5zdGF0ZS5kZWJ1ZyAmJiAoPGFueT53aW5kb3cpLmNvbnNvbGUuZGVidWcob3V0cHV0KTsgLy8gdHNsaW50OmRpc2FibGUtbGluZVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXQgbG9nIHRvIGNvbnNvbGUuICB0aGluayBmaWVsZCBkZXRlY3RvciB3aGVuIGxlYXZpbmcgaW4gcHJvZHVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gYVxuICAgICAqIEBwYXJhbSB7Kn0gYlxuICAgICAqIEByZXR1cm5zICB7Ym9vbGVhbn0gc3RhdGUgb2YgY29tcGxldGlvblxuICAgICAqL1xuICAgIHcuX2kgPSBmdW5jdGlvbihhOiBhbnksIGI6IGFueSkge1xuICAgICAgICAvLyByZXR1cm4gZm9yIGNvbnNpc3RlbmN5XG4gICAgICAgICB3LmRlZmluZWQoV1NVLnN0YXRlLmRlYnVnKSAmJiBXU1Uuc3RhdGUuZGVidWcgJiYgKDxhbnk+d2luZG93KS5jb25zb2xlLmluZm8oYSwgYik7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgICB9O1xufShXU1UpKTtcblxuXG5cbi8qXG4qIGpRdWVyeSBoZWxwZXJzLiAgTWF5IG1vdmUgYXdheSBmcm9tIGhlcmUsIGJ1dCBtdXN0IHByb3h5IGFueXRoaW5nXG4qL1xuKGZ1bmN0aW9uKCQsalF1ZXJ5KXsgLy8gdGhpcyB3aWxsIGRlcGVuZCBvbiBqUXVlcnlcbiAgICBqUXVlcnkuZXhwcltcIjpcIl0ucmVnZXggPSBmdW5jdGlvbiAoZWxlbTphbnksIGluZGV4OmFueSwgbWF0Y2g6YW55KSB7XG4gICAgICAgIHZhciBtYXRjaFBhcmFtcyA9IG1hdGNoWzNdLnNwbGl0KFwiLFwiKSxcbiAgICAgICAgICAgIHZhbGlkTGFiZWxzID0gL14oZGF0YXxjc3MpOi8sXG4gICAgICAgICAgICBhdHRyID0ge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogbWF0Y2hQYXJhbXNbMF0ubWF0Y2godmFsaWRMYWJlbHMpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFBhcmFtc1swXS5zcGxpdChcIjpcIilbMF0gOiBcImF0dHJcIixcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eTogbWF0Y2hQYXJhbXMuc2hpZnQoKS5yZXBsYWNlKHZhbGlkTGFiZWxzLCBcIlwiKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZ2V4RmxhZ3MgPSBcImlnXCIsXG4gICAgICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAobWF0Y2hQYXJhbXMuam9pbihcIlwiKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCBcIlwiKSwgcmVnZXhGbGFncyk7XG4gICAgICAgIHJldHVybiByZWdleC50ZXN0KGpRdWVyeShlbGVtKVthdHRyLm1ldGhvZF0oYXR0ci5wcm9wZXJ0eSkpO1xuICAgIH07XG4gICAgJC5mbi5vdmVyZmxvd24gPSBmdW5jdGlvbiAoKSB7IGxldCBlID0gdGhpc1swXTsgcmV0dXJuIGUuc2Nyb2xsSGVpZ2h0ID4gZS5jbGllbnRIZWlnaHQgfHwgZS5zY3JvbGxXaWR0aCA+IGUuY2xpZW50V2lkdGg7IH07XG4gICAgLy90YXJnZXRlZC51bmlxdWVJZCgpOyB8IHJlbW92ZVVuaXF1ZUlkKCkgLy8galF1ZXJ5IGV4dFxuICAgIChmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgICAgICBpZiAoIFdTVS5kZWZpbmVkKCAoPGFueT4gd2luZG93KS5kZWZpbmUsIFwiZnVuY3Rpb25cIikgJiYgKDxhbnk+IHdpbmRvdykuZGVmaW5lLmFtZCkge1xuICAgICAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICAgICAgKDxhbnk+IHdpbmRvdykuZGVmaW5lKFtcImpxdWVyeVwiLCBcIi4vdmVyc2lvblwiXSwgZmFjdG9yeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICAgICAgICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgICAgICAgfVxuICAgIH0oZnVuY3Rpb24gKCQ6YW55KSB7XG4gICAgICAgIHJldHVybiBqUXVlcnkuZm4uZXh0ZW5kKHtcbiAgICAgICAgICAgIHVuaXF1ZUlkOiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB1dWlkID0gMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaWQgPSBcImZ3LXRyYy1cIiArICgrK3V1aWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkoKSxcbiAgICAgICAgICAgIHJlbW92ZVVuaXF1ZUlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgvXmZ3LXRyYy1cXGQrJC8udGVzdCh0aGlzLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVBdHRyKFwiaWRcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSkpO1xuXG4gICAgJC5yZW5kZXIgPSBmdW5jdGlvbiAoaHRtbDphbnksIG9wdGlvbnM6YW55KSB7XG4gICAgICAgIC8vIEB0b2RvIGFkZCBiZXR0ZXIgZXJyb3IgaGFuZGxpbmcgZm9yIGVtcHR5cyBhdCB0aGUgbGVhc3RcbiAgICAgICAgdmFyIHJlLCBhZGQ6YW55LCBtYXRjaCwgY3Vyc29yLCBjb2RlOmFueSwgcmVFeHA6YW55LCByZXN1bHQ7XG5cbiAgICAgICAgcmUgPSAvPCUoLis/KSU+L2c7XG4gICAgICAgIHJlRXhwID0gLyheKCApPyh2YXJ8aWZ8Zm9yfGVsc2V8c3dpdGNofGNhc2V8YnJlYWt8e3x9fDspKSguKik/L2c7XG4gICAgICAgIGNvZGUgPSBcInZhciByPVtdO1xcblwiO1xuICAgICAgICBjdXJzb3IgPSAwO1xuXG4gICAgICAgIGFkZCA9IGZ1bmN0aW9uIChsaW5lOmFueSwganM6YW55KSB7XG4gICAgICAgICAgICBpZiAoanMpIHtcbiAgICAgICAgICAgICAgICBjb2RlICs9IGxpbmUubWF0Y2gocmVFeHApID8gbGluZSArIFwiXFxuXCIgOiBcInIucHVzaChcIiArIGxpbmUgKyBcIik7XFxuXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvZGUgKz0gbGluZSAhPT0gXCJcIiA/IFwici5wdXNoKCdcIiArIGxpbmUucmVwbGFjZSgvJy9nLCBcIlxcXCJcIikgKyBcIicpO1xcblwiIDogXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhZGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IHJlLmV4ZWMoaHRtbCkpKSB7XG4gICAgICAgICAgICBhZGQoaHRtbC5zbGljZShjdXJzb3IsIG1hdGNoLmluZGV4KSkobWF0Y2hbMV0sIHRydWUpO1xuICAgICAgICAgICAgY3Vyc29yID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYoV1NVLmRlZmluZWQoaHRtbCwnc3RyaW5nJykpe1xuICAgICAgICAgICAgYWRkKGh0bWwuc3Vic3RyKGN1cnNvciwgaHRtbC5sZW5ndGggLSBjdXJzb3IpKTtcbiAgICAgICAgICAgIGNvZGUgPSAoY29kZSArIFwicmV0dXJuIHIuam9pbignJyk7XCIpLnJlcGxhY2UoL1tcXHJcXHRcXG5dL2csIFwiXCIpO1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEZ1bmN0aW9uKGNvZGUpLmFwcGx5KG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn0oKDxhbnk+d2luZG93KS5qUXVlcnksKDxhbnk+d2luZG93KS5qUXVlcnkpKTtcbiIsIihmdW5jdGlvbiAod2luZG93OiBhbnksIFVJOiBXU1V1aVN0YXRpYykge1xuICAgICBVSS50ZXN0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgV1NVLl9kKCdnZXQgdG8gdGhlIFVJJyk7XG4gICAgICAgIFdTVS5fZChVSSk7XG4gICAgICAgIFdTVS5fZCgnMTIxNCcubGVhZGluZ0NoYXJzKCcwJywgMTApKTtcbiAgICB9O1xuXG4gICAgLy8gY2FuIGV4dGVuZCB0aGlzXG4gICAgV1NVLnByaW1lKCdhY3Rpb25zLnR5cGVzJywgVUkpO1xufSAod2luZG93LCBXU1UucHJpbWUoJ3VpJywgV1NVKSApICk7XG4iLCIoZnVuY3Rpb24gKHdpbmRvdzogYW55LCBVVElMOiBXU1V1dGlsU3RhdGljKSB7XG4gICAgVVRJTC5kdW1wS2V5c1JlY3Vyc2l2ZWx5ID0gZnVuY3Rpb24gKG9iajogYW55LCByZWdleDogYW55KSB7XG4gICAgICAgIHZhciBrZXlzOiBhbnkgPSBbXTtcbiAgICAgICAgcmVnZXggPSByZWdleCB8fCBmYWxzZTtcbiAgICAgICAgdmFyIGNyZWF0ZUtleVBhdGggPSBmdW5jdGlvbiAoY3VycmVudEtleVBhdGg6IGFueSwga2V5OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50S2V5UGF0aCArIChjdXJyZW50S2V5UGF0aCA/ICcuJyA6ICcnKSArIGtleTtcbiAgICAgICAgfTtcbiAgICAgICAgKGZ1bmN0aW9uIChwYXRoOiBhbnksIGFueTogYW55KSB7XG4gICAgICAgICAgICB2YXIgaTogYW55LCBrOiBhbnksIGN1cnJlbnRQYXRoOiBhbnk7XG4gICAgICAgICAgICBpZiAoIFdTVS5kZWZpbmVkKGFueSxcImFycmF5XCIpICkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhbnkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhdGggPSBjcmVhdGVLZXlQYXRoKHBhdGgsIChpKS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZhbHNlICE9PSByZWdleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBtYXRjaCA9IHJlZ2V4LmV4ZWMoY3VycmVudFBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHBtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChjdXJyZW50UGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlzLnB1c2goY3VycmVudFBhdGgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50cy5jYWxsZWUoY3VycmVudFBhdGgsIGFueVtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICggIVdTVS5kZWZpbmVkKGFueSxcInN0cmluZ1wiKSApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGsgaW4gYW55KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbnkuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYXRoID0gY3JlYXRlS2V5UGF0aChwYXRoLCBrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmYWxzZSAhPT0gcmVnZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm1hdGNoID0gcmVnZXguZXhlYyhjdXJyZW50UGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHJtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlzLnB1c2goY3VycmVudFBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGN1cnJlbnRQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50cy5jYWxsZWUoY3VycmVudFBhdGgsIGFueVtrXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCcnLCBvYmopO1xuICAgICAgICByZXR1cm4ga2V5cztcbiAgICB9O1xufSAod2luZG93LCBXU1UucHJpbWUoJ3V0aWxpdGllcycsIFdTVSkgKSApO1xuIiwiKGZ1bmN0aW9uICh3aW5kb3c6IGFueSwgVVRJTDogV1NVdXRpbFN0YXRpYykge1xuICAgICBVVElMLnRlc3QgPSBmdW5jdGlvbigpe1xuICAgICAgICBXU1UuX2QoJ2dldCB0byB0aGUgV1NVdXRpbFN0YXRpYycpO1xuICAgICAgICBXU1UuX2QoVVRJTCk7XG4gICAgICAgIFdTVS5fZCgnMTIxNCcubGVhZGluZ0NoYXJzKCcwJywgMTApKTtcbiAgICB9O1xuICAgIC8vIGNhbiBleHRlbmQgdGhpc1xuICAgIFdTVS5wcmltZSgnYWN0aW9ucy50eXBlcycsIFVUSUwpO1xufSAod2luZG93LCBXU1UucHJpbWUoJ3V0aWxpdGllcycsIFdTVSkgKSApO1xuIl19